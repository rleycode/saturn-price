#!/usr/bin/env python3

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from fast_saturn_parser import FastSaturnParser

def debug_407_price():
    """–ò—Å—Å–ª–µ–¥—É–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è —Ü–µ–Ω–æ–π 407.0‚ÇΩ"""
    
    # SKU –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ü–µ–Ω—É 407.0‚ÇΩ –∏–∑ –ª–æ–≥–æ–≤
    problem_skus = ["216212", "205897", "190081", "192633", "190080", "145983"]
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –¶–ï–ù–û–ô 407.0‚ÇΩ")
    print("=" * 50)
    
    parser = FastSaturnParser()
    
    for sku in problem_skus:
        print(f"\nüßê –ò—Å—Å–ª–µ–¥—É–µ–º SKU: {sku}")
        print("-" * 40)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            search_url = f"https://nnv.saturn.net/catalog/?sp%5Bname%5D=1&sp%5Bartikul%5D=1&search=&s={sku}"
            print(f"üîó –ü–æ–∏—Å–∫–æ–≤—ã–π URL: {search_url}")
            
            response = parser.session.get(search_url, timeout=10)
            if response.status_code == 200:
                from bs4 import BeautifulSoup
                soup = BeautifulSoup(response.content, 'html.parser')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
                product_items = soup.find_all('div', class_='h_s_list_categor_item_wrap')
                print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {len(product_items)}")
                
                found_direct = False
                for i, item in enumerate(product_items):
                    article_elem = item.find('p', class_='h_s_list_categor_item_articul')
                    if article_elem:
                        article_text = article_elem.get_text(strip=True)
                        expected_article = f"—Ç–æ–≤-{sku}"
                        if expected_article in article_text:
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ü–†–Ø–ú–û –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ {i+1}: {article_text}")
                            
                            price_elem = item.find('span', class_='js-price-value')
                            if price_elem and price_elem.get('data-price'):
                                price = price_elem.get('data-price')
                                print(f"üí∞ –¶–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {price}‚ÇΩ")
                                found_direct = True
                                break
                
                if not found_direct:
                    print("‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä—è–º–æ–º –ø–æ–∏—Å–∫–µ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —Å—Å—ã–ª–∫–∞–º
                page_text = soup.get_text()
                if "–Ω–∞–π–¥–µ–Ω–æ:" in page_text.lower() and "—Ç–æ–≤–∞—Ä" in page_text.lower():
                    import re
                    from urllib.parse import urljoin
                    
                    product_links = soup.find_all('a', href=re.compile(r'/catalog/[^/]+/[^/]+/$'))
                    print(f"üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã: {len(product_links)}")
                    
                    for i, link in enumerate(product_links):
                        link_text = link.get_text(strip=True).lower()
                        href = link.get('href')
                        
                        if (sku in link_text or 
                            f"—Ç–æ–≤-{sku}" in link_text or
                            any(keyword in link_text for keyword in ["–±—Ä—É—Å–æ–∫", "—Å—Ç—Ä–æ–≥–∞–Ω—ã–π", "—Å—É—Ö–æ–π"])):
                            
                            print(f"üéØ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Å—ã–ª–∫–∞ {i+1}: {link_text}")
                            print(f"üîó URL: {href}")
                            
                            if not href.startswith('http'):
                                product_url = urljoin("https://nnv.saturn.net", href)
                            else:
                                product_url = href
                            
                            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
                            product_response = parser.session.get(product_url, timeout=10)
                            if product_response.status_code == 200:
                                product_soup = BeautifulSoup(product_response.content, 'html.parser')
                                price_elements = product_soup.find_all(attrs={'data-price': True})
                                
                                if price_elements:
                                    price_value = price_elements[0].get('data-price')
                                    print(f"üí∞ –¶–µ–Ω–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞: {price_value}‚ÇΩ")
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                                    for tag in ['h1', 'h2', 'title']:
                                        title_elem = product_soup.find(tag)
                                        if title_elem:
                                            name = title_elem.get_text(strip=True)
                                            if len(name) > 10:
                                                print(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}")
                                                break
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ç–∏–∫—É–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞
                                    page_content = product_soup.get_text()
                                    if f"—Ç–æ–≤-{sku}" in page_content:
                                        print("‚úÖ –ê—Ä—Ç–∏–∫—É–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞")
                                    else:
                                        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ê—Ä—Ç–∏–∫—É–ª –ù–ï –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞!")
                                        print("üö® –í–û–ó–ú–û–ñ–ù–û –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –¢–û–í–ê–†!")
                                
                            break
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
                
        except Exception as e:
            print(f"üí• –û–®–ò–ë–ö–ê: {e}")

if __name__ == "__main__":
    debug_407_price()
