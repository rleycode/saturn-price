#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ Saturn
"""

import os
from bs4 import BeautifulSoup
import re

def find_product_structure(filename):
    """–ò—â–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–≤–∞—Ä–æ–≤ –≤ HTML"""
    
    if not os.path.exists(filename):
        return
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–≤–∞—Ä–æ–≤ –≤ {filename}")
    
    with open(filename, 'r', encoding='utf-8') as f:
        content = f.read()
    
    soup = BeautifulSoup(content, 'html.parser')
    
    # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∞—Ä—Ç–∏–∫—É–ª—ã "—Ç–æ–≤-"
    article_pattern = re.compile(r'—Ç–æ–≤-\d+')
    
    # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –∞—Ä—Ç–∏–∫—É–ª—ã
    elements_with_articles = []
    
    for element in soup.find_all(text=article_pattern):
        parent = element.parent
        if parent:
            elements_with_articles.append(parent)
    
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏: {len(elements_with_articles)}")
    
    if not elements_with_articles:
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    parent_info = {}
    
    for elem in elements_with_articles[:10]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10
        # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –ø–æ –¥–µ—Ä–µ–≤—É DOM —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–æ–≤–∞—Ä–∞
        current = elem
        depth = 0
        
        while current and depth < 5:  # –ú–∞–∫—Å–∏–º—É–º 5 —É—Ä–æ–≤–Ω–µ–π –≤–≤–µ—Ä—Ö
            if current.name:
                tag_class = current.get('class', [])
                tag_id = current.get('id', '')
                
                key = f"{current.name}.{'.'.join(tag_class) if tag_class else 'no-class'}"
                
                if key not in parent_info:
                    parent_info[key] = {
                        'count': 0,
                        'examples': [],
                        'has_price': False,
                        'has_name': False
                    }
                
                parent_info[key]['count'] += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ü–µ–Ω–∞ –≤ —ç—Ç–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
                price_text = current.get_text()
                if re.search(r'\d+[,.]?\d*\s*‚ÇΩ', price_text):
                    parent_info[key]['has_price'] = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                if len(price_text.strip()) > 50:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ
                    parent_info[key]['has_name'] = True
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä
                if len(parent_info[key]['examples']) < 2:
                    article_match = article_pattern.search(current.get_text())
                    if article_match:
                        parent_info[key]['examples'].append(article_match.group())
            
            current = current.parent
            depth += 1
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    sorted_parents = sorted(parent_info.items(), key=lambda x: x[1]['count'], reverse=True)
    
    print(f"\nüèÜ –õ—É—á—à–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞:")
    
    for i, (selector, info) in enumerate(sorted_parents[:5]):
        score = info['count']
        if info['has_price']:
            score += 10
        if info['has_name']:
            score += 5
        
        print(f"{i+1}. {selector}")
        print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {info['count']}")
        print(f"   üí∞ –ï—Å—Ç—å —Ü–µ–Ω–∞: {'‚úÖ' if info['has_price'] else '‚ùå'}")
        print(f"   üìù –ï—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ: {'‚úÖ' if info['has_name'] else '‚ùå'}")
        print(f"   üè∑Ô∏è –ü—Ä–∏–º–µ—Ä—ã: {', '.join(info['examples'])}")
        print(f"   ‚≠ê –û—Ü–µ–Ω–∫–∞: {score}")
        print()

def find_specific_elements(filename):
    """–ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ü–µ–Ω –∏ –Ω–∞–∑–≤–∞–Ω–∏–π"""
    
    if not os.path.exists(filename):
        return
    
    print(f"üîç –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ü–µ–Ω –∏ –Ω–∞–∑–≤–∞–Ω–∏–π –≤ {filename}")
    
    with open(filename, 'r', encoding='utf-8') as f:
        content = f.read()
    
    soup = BeautifulSoup(content, 'html.parser')
    
    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
    price_pattern = re.compile(r'\d+[,.]?\d*\s*‚ÇΩ')
    price_elements = []
    
    for element in soup.find_all(text=price_pattern):
        parent = element.parent
        if parent:
            price_elements.append({
                'tag': parent.name,
                'class': parent.get('class', []),
                'id': parent.get('id', ''),
                'text': element.strip(),
                'attributes': dict(parent.attrs)
            })
    
    print(f"üí∞ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏: {len(price_elements)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
    price_attrs = {}
    for elem in price_elements[:10]:
        for attr, value in elem['attributes'].items():
            if attr not in price_attrs:
                price_attrs[attr] = []
            price_attrs[attr].append(str(value))
    
    print(f"üìä –ê—Ç—Ä–∏–±—É—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏:")
    for attr, values in price_attrs.items():
        unique_values = list(set(values))[:3]  # –ü–µ—Ä–≤—ã–µ 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è
        print(f"  {attr}: {', '.join(unique_values)}")

def main():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML —Ñ–∞–π–ª—ã"""
    
    html_files = [f for f in os.listdir('.') if f.startswith('debug_search_') and f.endswith('.html')]
    
    if not html_files:
        print("‚ùå HTML —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –¥–µ—Ç–∞–ª—å–Ω–æ
    first_file = html_files[0]
    
    find_product_structure(first_file)
    print("\n" + "="*60 + "\n")
    find_specific_elements(first_file)

if __name__ == "__main__":
    main()
