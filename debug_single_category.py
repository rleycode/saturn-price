#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Saturn
"""

import requests
from bs4 import BeautifulSoup
import re

def analyze_single_category():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–µ—Ç–∞–ª—å–Ω–æ"""
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    url = "https://nnv.saturn.net/catalog/brusok-rejka/tag-50-mm/"
    
    session = requests.Session()
    session.headers.update({
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    })
    
    print(f"üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: {url}")
    print("=" * 60)
    
    try:
        response = session.get(url, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
        containers = soup.select('div.h_s_list_categor_item_wrap')
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {len(containers)}")
        
        if containers:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            for i, container in enumerate(containers[:3], 1):
                print(f"\n--- –ö–û–ù–¢–ï–ô–ù–ï–† {i} ---")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                print("HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
                print(str(container)[:500] + "..." if len(str(container)) > 500 else str(container))
                
                # –ò—â–µ–º –∞—Ä—Ç–∏–∫—É–ª —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                print(f"\nüè∑Ô∏è  –ü–û–ò–°–ö –ê–†–¢–ò–ö–£–õ–ê:")
                
                # –°–ø–æ—Å–æ–± 1: p.h_s_list_categor_item_articul
                article_elem = container.select_one('p.h_s_list_categor_item_articul')
                if article_elem:
                    print(f"   ‚úÖ p.h_s_list_categor_item_articul: '{article_elem.get_text(strip=True)}'")
                else:
                    print(f"   ‚ùå p.h_s_list_categor_item_articul: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –°–ø–æ—Å–æ–± 2: –≤—Å–µ p —ç–ª–µ–º–µ–Ω—Ç—ã
                p_elements = container.find_all('p')
                print(f"   üìÑ –í—Å–µ–≥–æ p —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(p_elements)}")
                for j, p in enumerate(p_elements):
                    p_text = p.get_text(strip=True)
                    p_classes = p.get('class', [])
                    print(f"      p[{j}]: class='{p_classes}' text='{p_text}'")
                
                # –°–ø–æ—Å–æ–± 3: –ø–æ–∏—Å–∫ —Ç–æ–≤- –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                container_text = container.get_text()
                article_matches = re.findall(r'—Ç–æ–≤-(\d+)', container_text, re.IGNORECASE)
                if article_matches:
                    print(f"   ‚úÖ –ê—Ä—Ç–∏–∫—É–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ: {article_matches}")
                else:
                    print(f"   ‚ùå –ê—Ä—Ç–∏–∫—É–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                # –ò—â–µ–º —Ü–µ–Ω—É
                print(f"\nüí∞ –ü–û–ò–°–ö –¶–ï–ù–´:")
                
                # –°–ø–æ—Å–æ–± 1: span.shopping_cart_goods_list_item_sum_item
                price_elem = container.select_one('span.shopping_cart_goods_list_item_sum_item')
                if price_elem:
                    price_text = price_elem.get_text(strip=True)
                    data_price = price_elem.get('data-price')
                    print(f"   ‚úÖ span.shopping_cart_goods_list_item_sum_item: text='{price_text}' data-price='{data_price}'")
                else:
                    print(f"   ‚ùå span.shopping_cart_goods_list_item_sum_item: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –°–ø–æ—Å–æ–± 2: –≤—Å–µ span —ç–ª–µ–º–µ–Ω—Ç—ã
                span_elements = container.find_all('span')
                print(f"   üìÑ –í—Å–µ–≥–æ span —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(span_elements)}")
                for j, span in enumerate(span_elements[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    span_text = span.get_text(strip=True)
                    span_classes = span.get('class', [])
                    data_price = span.get('data-price')
                    print(f"      span[{j}]: class='{span_classes}' text='{span_text}' data-price='{data_price}'")
                
                # –°–ø–æ—Å–æ–± 3: –ø–æ–∏—Å–∫ —Ü–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ
                price_matches = re.findall(r'(\d+[,.]?\d*)\s*‚ÇΩ', container_text)
                if price_matches:
                    print(f"   ‚úÖ –¶–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ: {price_matches}")
                else:
                    print(f"   ‚ùå –¶–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                print(f"\nüìù –ü–û–ò–°–ö –ù–ê–ó–í–ê–ù–ò–Ø:")
                
                # –°–ø–æ—Å–æ–± 1: a.h_s_list_categor_item
                name_elem = container.select_one('a.h_s_list_categor_item')
                if name_elem:
                    name_text = name_elem.get_text(strip=True)
                    href = name_elem.get('href')
                    print(f"   ‚úÖ a.h_s_list_categor_item: '{name_text}' href='{href}'")
                else:
                    print(f"   ‚ùå a.h_s_list_categor_item: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –°–ø–æ—Å–æ–± 2: –≤—Å–µ a —ç–ª–µ–º–µ–Ω—Ç—ã
                a_elements = container.find_all('a')
                print(f"   üìÑ –í—Å–µ–≥–æ a —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(a_elements)}")
                for j, a in enumerate(a_elements[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                    a_text = a.get_text(strip=True)
                    a_classes = a.get('class', [])
                    href = a.get('href')
                    print(f"      a[{j}]: class='{a_classes}' text='{a_text[:50]}...' href='{href}'")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        with open('debug_single_category.html', 'w', encoding='utf-8') as f:
            f.write(response.text)
        print(f"\nüíæ –ü–æ–ª–Ω—ã–π HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω: debug_single_category.html")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    analyze_single_category()
    return 0

if __name__ == '__main__':
    import sys
    sys.exit(main())
