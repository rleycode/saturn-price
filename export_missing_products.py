#!/usr/bin/env python3

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from bitrix_integration import BitrixClient, BitrixConfig
import os
from dotenv import load_dotenv

load_dotenv()

def export_missing_products():
    """–í—ã–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ Saturn –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Ö —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ SKU –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ
    missing_skus = ["216212", "205897", "190081", "192633", "190080", "145983", "014143", "137742"]
    
    print("üìã –í–´–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –û –ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ò–• –¢–û–í–ê–†–ê–• SATURN")
    print("=" * 60)
    print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º {len(missing_skus)} –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitrix
    config = BitrixConfig(
        mysql_host=os.getenv('BITRIX_MYSQL_HOST', 'localhost'),
        mysql_port=int(os.getenv('BITRIX_MYSQL_PORT', 3306)),
        mysql_database=os.getenv('BITRIX_MYSQL_DATABASE', 'sitemanager'),
        mysql_username=os.getenv('BITRIX_MYSQL_USERNAME', 'bitrix_sync'),
        mysql_password=os.getenv('BITRIX_MYSQL_PASSWORD', ''),
        iblock_id=int(os.getenv('BITRIX_IBLOCK_ID', 11)),
        supplier_prefix=os.getenv('SUPPLIER_PREFIX', '—Ç–æ–≤-'),
        underprice_url=os.getenv('SATURN_UNDERPRICE_URL'),
        underprice_password=os.getenv('SATURN_UNDERPRICE_PASSWORD')
    )
    
    bitrix_client = BitrixClient(config)
    
    try:
        if not bitrix_client.connect():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Bitrix")
            return
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        print()
        
        found_products = []
        not_found_in_db = []
        
        for sku in missing_skus:
            article_with_prefix = f"—Ç–æ–≤-{sku}"
            
            # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
            query = """
            SELECT 
                e.ID,
                e.NAME,
                e.ACTIVE,
                e.DATE_CREATE,
                e.TIMESTAMP_X,
                pv.VALUE as ARTICLE
            FROM b_iblock_element e
            LEFT JOIN b_iblock_element_property pv ON e.ID = pv.IBLOCK_ELEMENT_ID 
                AND pv.IBLOCK_PROPERTY_ID = 112
            WHERE e.IBLOCK_ID = %s 
                AND pv.VALUE = %s
            """
            
            cursor = bitrix_client.connection.cursor()
            cursor.execute(query, (config.iblock_id, article_with_prefix))
            result = cursor.fetchone()
            
            if result:
                product_id, name, active, date_create, timestamp_x, article = result
                found_products.append({
                    'sku': sku,
                    'article': article,
                    'name': name,
                    'active': '–î–∞' if active == 'Y' else '–ù–µ—Ç',
                    'created': date_create.strftime('%Y-%m-%d') if date_create else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'updated': timestamp_x.strftime('%Y-%m-%d %H:%M') if timestamp_x else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                })
                print(f"‚úÖ {sku} ({article})")
                print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}")
                print(f"   üü¢ –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if active == 'Y' else '–ù–µ—Ç'}")
                print(f"   üìÖ –°–æ–∑–¥–∞–Ω: {date_create.strftime('%Y-%m-%d') if date_create else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
                print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {timestamp_x.strftime('%Y-%m-%d %H:%M') if timestamp_x else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
            else:
                not_found_in_db.append(sku)
                print(f"‚ùå {sku} - –ù–ï –ù–ê–ô–î–ï–ù –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV —Ñ–∞–π–ª
        import csv
        with open('missing_saturn_products.csv', 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = ['sku', 'article', 'name', 'active', 'created', 'updated', 'status']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            writer.writeheader()
            
            for product in found_products:
                product['status'] = '–ù–∞–π–¥–µ–Ω –≤ –ë–î, –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ'
                writer.writerow(product)
            
            for sku in not_found_in_db:
                writer.writerow({
                    'sku': sku,
                    'article': f'—Ç–æ–≤-{sku}',
                    'name': '–ù–ï –ù–ê–ô–î–ï–ù –í –ë–ê–ó–ï –î–ê–ù–ù–´–•',
                    'active': '',
                    'created': '',
                    'updated': '',
                    'status': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î'
                })
        
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 30)
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {len(missing_skus)}")
        print(f"–ù–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {len(found_products)}")
        print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {len(not_found_in_db)}")
        print()
        print("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: missing_saturn_products.csv")
        print()
        
        if found_products:
            print("üîç –¢–û–í–ê–†–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ù–ê –°–ê–ô–¢–ï SATURN:")
            print("-" * 40)
            for product in found_products:
                print(f"‚Ä¢ {product['sku']}: {product['name']}")
        
        if not_found_in_db:
            print("‚ö†Ô∏è  –ê–†–¢–ò–ö–£–õ–´ –ù–ï –ù–ê–ô–î–ï–ù–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:")
            print("-" * 40)
            for sku in not_found_in_db:
                print(f"‚Ä¢ {sku}")
    
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
    
    finally:
        bitrix_client.disconnect()

if __name__ == "__main__":
    export_missing_products()
