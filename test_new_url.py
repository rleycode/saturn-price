#!/usr/bin/env python3

import requests
from bs4 import BeautifulSoup

def test_new_saturn_url():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –ø–æ–∏—Å–∫–∞ Saturn"""
    
    sku = "007556"
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    search_url = f"https://nnv.saturn.net/catalog/?sp%5Bname%5D=1&sp%5Bartikul%5D=1&search=&s={sku}"
    
    print(f"üîç –¢–ï–°–¢ –ù–û–í–û–ì–û URL –ü–û–ò–°–ö–ê SATURN")
    print("=" * 50)
    print(f"SKU: {sku}")
    print(f"URL: {search_url}")
    print()
    
    session = requests.Session()
    session.headers.update({
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    })
    
    try:
        response = session.get(search_url, timeout=15)
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
            product_containers = soup.find_all('div', class_='h_s_list_categor_item_wrap')
            print(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {len(product_containers)}")
            
            if len(product_containers) == 0:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                print("\n–ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
                all_divs = soup.find_all('div', class_=True)
                for div in all_divs[:10]:
                    classes = ' '.join(div.get('class', []))
                    if 'item' in classes.lower() or 'product' in classes.lower() or 'catalog' in classes.lower():
                        print(f"  –ù–∞–π–¥–µ–Ω div —Å –∫–ª–∞—Å—Å–æ–º: {classes}")
            
            found_product = False
            expected_article = f"—Ç–æ–≤-{sku}"
            
            for i, container in enumerate(product_containers):
                # –ò—â–µ–º –∞—Ä—Ç–∏–∫—É–ª
                article_elem = container.find('p', class_='h_s_list_categor_item_articul')
                if not article_elem:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    article_elem = container.find('span', class_='article')
                    if not article_elem:
                        article_elem = container.find(string=lambda text: text and '—Ç–æ–≤-' in text)
                
                # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                name_elem = container.find('a', class_='h_s_list_categor_item')
                if not name_elem:
                    name_elem = container.find('a', class_='name')
                
                # –ò—â–µ–º —Ü–µ–Ω—É
                price_elem = container.find('span', class_='js-price-value')
                if not price_elem:
                    price_elem = container.find('span', attrs={'data-price': True})
                
                if article_elem:
                    article_text = article_elem.get_text(strip=True) if hasattr(article_elem, 'get_text') else str(article_elem).strip()
                    name_text = name_elem.get_text(strip=True) if name_elem else "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                    
                    price_text = "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    if price_elem:
                        if price_elem.get('data-price'):
                            price_text = f"{price_elem.get('data-price')} —Ä—É–±."
                        else:
                            price_text = price_elem.get_text(strip=True)
                    
                    print(f"\n  –¢–æ–≤–∞—Ä {i+1}:")
                    print(f"    –ê—Ä—Ç–∏–∫—É–ª: {article_text}")
                    print(f"    –ù–∞–∑–≤–∞–Ω–∏–µ: {name_text}")
                    print(f"    –¶–µ–Ω–∞: {price_text}")
                    
                    if expected_article in article_text:
                        print(f"    ‚úÖ –ù–ê–ô–î–ï–ù –ò–°–ö–û–ú–´–ô –¢–û–í–ê–†!")
                        found_product = True
            
            if not found_product:
                print(f"\n‚ùå –¢–æ–≤–∞—Ä {expected_article} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞
                page_text = soup.get_text()
                if expected_article in page_text:
                    print(f"‚úÖ –ù–æ –∞—Ä—Ç–∏–∫—É–ª {expected_article} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                else:
                    print(f"‚ùå –ê—Ä—Ç–∏–∫—É–ª {expected_article} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            else:
                print(f"\nüéâ –£–°–ü–ï–•! –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω —Å –Ω–æ–≤—ã–º URL!")
        
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            print(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text[:500]}...")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_new_saturn_url()
