#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Bitrix
"""

import os
import mysql.connector
from mysql.connector import Error
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ Saturn"""
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = mysql.connector.connect(
            host=os.getenv('BITRIX_MYSQL_HOST', '127.0.0.1'),
            port=int(os.getenv('BITRIX_MYSQL_PORT', 3306)),
            database=os.getenv('BITRIX_MYSQL_DATABASE', 'sitemanager'),
            user=os.getenv('BITRIX_MYSQL_USERNAME', 'bitrix_sync'),
            password=os.getenv('BITRIX_MYSQL_PASSWORD', ''),
            charset='utf8mb4'
        )
        
        cursor = connection.cursor(dictionary=True)
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∏–Ω—Ñ–æ–±–ª–æ–∫–∞
        iblock_id = int(os.getenv('BITRIX_IBLOCK_ID', 11))
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ–±–ª–æ–∫ ID: {iblock_id}")
        
        cursor.execute("SELECT * FROM b_iblock WHERE ID = %s", (iblock_id,))
        iblock = cursor.fetchone()
        if iblock:
            print(f"‚úÖ –ò–Ω—Ñ–æ–±–ª–æ–∫ –Ω–∞–π–¥–µ–Ω: {iblock['NAME']}")
        else:
            print(f"‚ùå –ò–Ω—Ñ–æ–±–ª–æ–∫ —Å ID {iblock_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # 2. –ò—â–µ–º —Å–≤–æ–π—Å—Ç–≤–æ CML2_ARTICLE
        print(f"\nüîç –ò—â–µ–º —Å–≤–æ–π—Å—Ç–≤–æ CML2_ARTICLE –≤ –∏–Ω—Ñ–æ–±–ª–æ–∫–µ {iblock_id}")
        cursor.execute("""
            SELECT ID, NAME, CODE 
            FROM b_iblock_property 
            WHERE IBLOCK_ID = %s AND CODE = 'CML2_ARTICLE'
        """, (iblock_id,))
        
        article_property = cursor.fetchone()
        if article_property:
            property_id = article_property['ID']
            print(f"‚úÖ –°–≤–æ–π—Å—Ç–≤–æ CML2_ARTICLE –Ω–∞–π–¥–µ–Ω–æ: ID = {property_id}")
        else:
            print(f"‚ùå –°–≤–æ–π—Å—Ç–≤–æ CML2_ARTICLE –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–Ω—Ñ–æ–±–ª–æ–∫–µ {iblock_id}!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–Ω—Ñ–æ–±–ª–æ–∫–∞
            cursor.execute("""
                SELECT ID, NAME, CODE 
                FROM b_iblock_property 
                WHERE IBLOCK_ID = %s 
                ORDER BY SORT, NAME
            """, (iblock_id,))
            
            properties = cursor.fetchall()
            print(f"\nüìã –í—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–Ω—Ñ–æ–±–ª–æ–∫–∞ {iblock_id}:")
            for prop in properties[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"  ID: {prop['ID']}, CODE: {prop['CODE']}, NAME: {prop['NAME']}")
            return
        
        # 3. –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "—Ç–æ–≤-"
        supplier_prefix = os.getenv('SUPPLIER_PREFIX', '—Ç–æ–≤-')
        print(f"\nüîç –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '{supplier_prefix}'")
        
        query = """
        SELECT COUNT(*) as total_count
        FROM b_iblock_element e
        LEFT JOIN b_iblock_element_property p_article ON 
            e.ID = p_article.IBLOCK_ELEMENT_ID AND p_article.IBLOCK_PROPERTY_ID = %s
        WHERE e.IBLOCK_ID = %s 
            AND e.ACTIVE = 'Y'
            AND p_article.VALUE LIKE %s
        """
        
        cursor.execute(query, (property_id, iblock_id, f"{supplier_prefix}%"))
        result = cursor.fetchone()
        total_count = result['total_count']
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '{supplier_prefix}': {total_count}")
        
        if total_count == 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ç–æ–≤–∞—Ä—ã –≤ –∏–Ω—Ñ–æ–±–ª–æ–∫–µ
            cursor.execute("SELECT COUNT(*) as total FROM b_iblock_element WHERE IBLOCK_ID = %s AND ACTIVE = 'Y'", (iblock_id,))
            total_products = cursor.fetchone()['total']
            print(f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∏–Ω—Ñ–æ–±–ª–æ–∫–µ: {total_products}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤
            cursor.execute("""
                SELECT e.NAME, p_article.VALUE as ARTICLE
                FROM b_iblock_element e
                LEFT JOIN b_iblock_element_property p_article ON 
                    e.ID = p_article.IBLOCK_ELEMENT_ID AND p_article.IBLOCK_PROPERTY_ID = %s
                WHERE e.IBLOCK_ID = %s AND e.ACTIVE = 'Y' AND p_article.VALUE IS NOT NULL
                LIMIT 10
            """, (property_id, iblock_id))
            
            examples = cursor.fetchall()
            print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ –±–∞–∑–µ:")
            for example in examples:
                print(f"  {example['ARTICLE']} - {example['NAME']}")
        
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ Saturn
            cursor.execute("""
                SELECT e.NAME, p_article.VALUE as ARTICLE
                FROM b_iblock_element e
                LEFT JOIN b_iblock_element_property p_article ON 
                    e.ID = p_article.IBLOCK_ELEMENT_ID AND p_article.IBLOCK_PROPERTY_ID = %s
                WHERE e.IBLOCK_ID = %s 
                    AND e.ACTIVE = 'Y'
                    AND p_article.VALUE LIKE %s
                LIMIT 5
            """, (property_id, iblock_id, f"{supplier_prefix}%"))
            
            saturn_products = cursor.fetchall()
            print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ Saturn:")
            for product in saturn_products:
                print(f"  {product['ARTICLE']} - {product['NAME']}")
        
    except Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    finally:
        if connection and connection.is_connected():
            cursor.close()
            connection.close()
            print(f"\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    check_database()
