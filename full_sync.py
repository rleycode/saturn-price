#!/usr/bin/env python3
"""
Full Sync - –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Saturn —Å Bitrix
"""

import os
import sys
import time
import json
from pathlib import Path
from datetime import datetime
import logging
from typing import List, Optional

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from saturn_parser import SaturnParser, ProcessLock, load_skus_from_file
from bitrix_integration import BitrixClient, BitrixConfig, process_saturn_prices

logger = logging.getLogger(__name__)


class FullSyncManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, config_file: str = None):
        self.config = self._load_config(config_file)
        self.output_dir = Path("output")
        self.output_dir.mkdir(exist_ok=True)
        
        # –§–∞–π–ª—ã –¥–ª—è —ç—Ç–∞–ø–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.raw_prices_file = self.output_dir / "saturn_raw_prices.csv"
        self.processed_prices_file = self.output_dir / "saturn_processed_prices.csv"
        
    def _load_config(self, config_file: str = None) -> BitrixConfig:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if config_file and Path(config_file).exists():
            with open(config_file, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
            return BitrixConfig(**config_data)
        else:
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            return BitrixConfig(
                mysql_host=os.getenv('BITRIX_MYSQL_HOST', 'localhost'),
                mysql_port=int(os.getenv('BITRIX_MYSQL_PORT', 3306)),
                mysql_database=os.getenv('BITRIX_MYSQL_DATABASE', 'sitemanager'),
                mysql_username=os.getenv('BITRIX_MYSQL_USERNAME', 'bitrix_sync'),
                mysql_password=os.getenv('BITRIX_MYSQL_PASSWORD', ''),
                iblock_id=int(os.getenv('BITRIX_IBLOCK_ID', 11)),
                supplier_prefix=os.getenv('SUPPLIER_PREFIX', 'saturn-'),
                underprice_url=os.getenv('SATURN_UNDERPRICE_URL'),
                underprice_password=os.getenv('SATURN_UNDERPRICE_PASSWORD')
            )
    
    def get_saturn_skus(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ Saturn –∏–∑ Bitrix"""
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ Saturn –∏–∑ Bitrix...")
        
        with BitrixClient(self.config) as bitrix:
            products = bitrix.get_products_by_prefix()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
            skus = []
            for product in products:
                saturn_sku = product.article.replace(self.config.supplier_prefix, '')
                skus.append(saturn_sku)
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ Saturn: {len(skus)}")
            return skus
    
    def stage1_parse_prices(self, skus: List[str] = None, batch_size: int = None) -> bool:
        """–≠—Ç–∞–ø 1: –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω —Å Saturn"""
        logger.info("=== –≠–¢–ê–ü 1: –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω —Å Saturn ===")
        
        if not skus:
            skus = self.get_saturn_skus()
        
        if not skus:
            logger.error("–ù–µ—Ç –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return False
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–∫–µ—Ç–∞
        if batch_size and len(skus) > batch_size:
            logger.info(f"–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ {batch_size} —Ç–æ–≤–∞—Ä–æ–≤")
            skus = skus[:batch_size]
        
        # –ü–∞—Ä—Å–∏–Ω–≥
        saturn_parser = SaturnParser()
        start_time = time.time()
        
        try:
            results = saturn_parser.parse_products(skus, str(self.raw_prices_file))
            elapsed = time.time() - start_time
            
            logger.info(f"–≠—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f}—Å")
            logger.info(f"–°–ø–∞—Ä—Å–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(results)}/{len(skus)}")
            
            return len(results) > 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return False
    
    def stage2_process_markups(self) -> bool:
        """–≠—Ç–∞–ø 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–æ–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Bitrix"""
        logger.info("=== –≠–¢–ê–ü 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–æ–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Bitrix ===")
        
        if not self.raw_prices_file.exists():
            logger.error(f"–§–∞–π–ª —Å —Ü–µ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.raw_prices_file}")
            return False
        
        try:
            success = process_saturn_prices(
                str(self.raw_prices_file),
                self.config,
                str(self.processed_prices_file)
            )
            
            if success:
                logger.info("–≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error("–≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Ü–µ–Ω–æ–∫: {e}")
            return False
    
    def run_full_sync(self, batch_size: int = None, skus_file: str = None) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Saturn ‚Üí Bitrix")
        start_time = time.time()
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
            if skus_file:
                skus = load_skus_from_file(skus_file)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {len(skus)}")
            else:
                skus = None
            
            # –≠—Ç–∞–ø 1: –ü–∞—Ä—Å–∏–Ω–≥
            if not self.stage1_parse_prices(skus, batch_size):
                logger.error("–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–∞—Ä—Å–∏–Ω–≥–∞")
                return False
            
            # –≠—Ç–∞–ø 2: –ù–∞—Ü–µ–Ω–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if not self.stage2_process_markups():
                logger.error("–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Ü–µ–Ω–æ–∫")
                return False
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            elapsed = time.time() - start_time
            logger.info(f"‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed:.1f}—Å")
            
            return True
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def cleanup_old_files(self, days: int = 7):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        logger.info(f"–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...")
        
        cutoff_time = time.time() - (days * 24 * 60 * 60)
        cleaned_count = 0
        
        for file_path in self.output_dir.glob("*.csv"):
            if file_path.stat().st_mtime < cutoff_time:
                file_path.unlink()
                cleaned_count += 1
                logger.debug(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file_path}")
        
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {cleaned_count}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Saturn Full Sync')
    parser.add_argument('--config', help='JSON —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π')
    parser.add_argument('--skus-file', help='–§–∞–π–ª —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞')
    parser.add_argument('--batch-size', type=int, default=100, help='–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞')
    parser.add_argument('--parse-only', action='store_true', help='–¢–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Bitrix')
    parser.add_argument('--process-only', action='store_true', help='–¢–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞')
    parser.add_argument('--cleanup', action='store_true', help='–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤')
    parser.add_argument('--test-mode', action='store_true', help='–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤)')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    if args.test_mode:
        args.batch_size = min(args.batch_size, 10)
        logger.info("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ 10 —Ç–æ–≤–∞—Ä–∞–º–∏")
    
    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
    lock_file = "/tmp/saturn_full_sync.lock" if os.name != 'nt' else "saturn_full_sync.lock"
    
    try:
        with ProcessLock(lock_file):
            sync_manager = FullSyncManager(args.config)
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
            if args.cleanup:
                sync_manager.cleanup_old_files()
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if args.parse_only:
                success = sync_manager.stage1_parse_prices(batch_size=args.batch_size)
            elif args.process_only:
                success = sync_manager.stage2_process_markups()
            else:
                success = sync_manager.run_full_sync(
                    batch_size=args.batch_size,
                    skus_file=args.skus_file
                )
            
            return 0 if success else 1
            
    except RuntimeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        return 1
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == '__main__':
    sys.exit(main())
