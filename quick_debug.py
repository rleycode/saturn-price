#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø —Ü–µ–Ω
"""

import os
import sys
from dotenv import load_dotenv
import mysql.connector

load_dotenv()

def quick_debug():
    connection = mysql.connector.connect(
        host=os.getenv('BITRIX_MYSQL_HOST', '127.0.0.1'),
        port=int(os.getenv('BITRIX_MYSQL_PORT', 3306)),
        database=os.getenv('BITRIX_MYSQL_DATABASE', 'sitemanager'),
        user=os.getenv('BITRIX_MYSQL_USERNAME', 'bitrix_sync'),
        password=os.getenv('BITRIX_MYSQL_PASSWORD', ''),
        charset='utf8mb4',
        use_pure=True
    )
    
    cursor = connection.cursor(dictionary=True)
    
    print("üîç –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –≥—Ä—É–ø–ø —Ü–µ–Ω
    print("\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã b_catalog_group:")
    cursor.execute("DESCRIBE b_catalog_group")
    columns = cursor.fetchall()
    for col in columns:
        print(f"  {col['Field']}: {col['Type']}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã —Ü–µ–Ω
    print("\nüí∞ –ì—Ä—É–ø–ø—ã —Ü–µ–Ω:")
    cursor.execute("SELECT ID, NAME, BASE, SORT FROM b_catalog_group ORDER BY SORT, ID")
    groups = cursor.fetchall()
    for group in groups:
        base_mark = "üî• –ë–ê–ó–û–í–ê–Ø" if group['BASE'] == 'Y' else ""
        print(f"  ID {group['ID']}: {group['NAME']} {base_mark}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä Saturn
    supplier_prefix = os.getenv('SUPPLIER_PREFIX', '—Ç–æ–≤-')
    print(f"\nüß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä Saturn (–ø—Ä–µ—Ñ–∏–∫—Å: {supplier_prefix}):")
    
    cursor.execute("""
    SELECT 
        e.ID,
        e.NAME,
        e.ACTIVE,
        prop.VALUE as ARTICLE
    FROM b_iblock_element e
    LEFT JOIN b_iblock_element_property prop ON (
        e.ID = prop.IBLOCK_ELEMENT_ID 
        AND prop.IBLOCK_PROPERTY_ID = (
            SELECT ID FROM b_iblock_property 
            WHERE IBLOCK_ID = e.IBLOCK_ID AND CODE = 'CML2_ARTICLE'
        )
    )
    WHERE e.ACTIVE = 'Y' 
    AND e.IBLOCK_ID = %s
    AND prop.VALUE LIKE %s
    ORDER BY e.ID
    LIMIT 1
    """, (int(os.getenv('BITRIX_IBLOCK_ID', 11)), f"{supplier_prefix}%"))
    
    test_product = cursor.fetchone()
    if test_product:
        print(f"  üì¶ {test_product['ARTICLE']} (ID: {test_product['ID']})")
        print(f"    –ù–∞–∑–≤–∞–Ω–∏–µ: {test_product['NAME']}")
        print(f"    –ê–∫—Ç–∏–≤–µ–Ω: {test_product['ACTIVE']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        cursor.execute("""
        SELECT 
            price.CATALOG_GROUP_ID,
            cg.NAME as GROUP_NAME,
            price.PRICE,
            price.TIMESTAMP_X
        FROM b_catalog_price price
        LEFT JOIN b_catalog_group cg ON price.CATALOG_GROUP_ID = cg.ID
        WHERE price.PRODUCT_ID = %s
        ORDER BY price.CATALOG_GROUP_ID
        """, (test_product['ID'],))
        
        prices = cursor.fetchall()
        if prices:
            print(f"    –¶–µ–Ω—ã:")
            for price in prices:
                print(f"      –ì—Ä—É–ø–ø–∞ {price['CATALOG_GROUP_ID']} ({price['GROUP_NAME']}): {price['PRICE']} —Ä—É–±.")
                print(f"        –û–±–Ω–æ–≤–ª–µ–Ω–æ: {price['TIMESTAMP_X']}")
        else:
            print("    ‚ùå –¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    else:
        print("  ‚ùå –¢–æ–≤–∞—Ä—ã Saturn –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–µ–Ω
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω:")
    cursor.execute("""
    SELECT 
        cg.ID,
        cg.NAME,
        COUNT(cp.PRODUCT_ID) as PRODUCTS_COUNT
    FROM b_catalog_group cg
    LEFT JOIN b_catalog_price cp ON cg.ID = cp.CATALOG_GROUP_ID
    GROUP BY cg.ID, cg.NAME
    ORDER BY cg.ID
    """)
    
    stats = cursor.fetchall()
    for stat in stats:
        print(f"  –ì—Ä—É–ø–ø–∞ {stat['ID']} ({stat['NAME']}): {stat['PRODUCTS_COUNT']} —Ç–æ–≤–∞—Ä–æ–≤")
    
    cursor.close()
    connection.close()

if __name__ == "__main__":
    try:
        quick_debug()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
