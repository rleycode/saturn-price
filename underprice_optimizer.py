#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å–∫–∏–¥–æ–∫ (–∑–∞–º–µ–Ω–∞ underprice.php)
–ü—Ä—è–º–∞—è —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import sys
import logging
from typing import List, Dict, Tuple, Optional
from dataclasses import dataclass
from datetime import datetime
import mysql.connector
from mysql.connector import Error

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger('underprice_optimizer')

@dataclass
class PriceRule:
    """–ü—Ä–∞–≤–∏–ª–æ —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–∏–¥–∫–∏"""
    section_id: int
    min_price: float
    max_price: float
    discount_percent: float
    priority: int

@dataclass
class ProductPrice:
    """–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞"""
    product_id: int
    price: float
    section_id: int
    article: str

class UnderpriceOptimizer:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å–∫–∏–¥–æ–∫"""
    
    def __init__(self, mysql_config: dict):
        self.mysql_config = mysql_config
        self.connection = None
        self.processed_count = 0
        self.updated_count = 0
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL"""
        try:
            self.connection = mysql.connector.connect(
                host=self.mysql_config['host'],
                port=self.mysql_config['port'],
                database=self.mysql_config['database'],
                user=self.mysql_config['user'],
                password=self.mysql_config['password'],
                charset='utf8mb4',
                autocommit=True,
                use_pure=True
            )
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL: {self.mysql_config['host']}:{self.mysql_config['port']}")
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
            raise
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MySQL"""
        if self.connection:
            self.connection.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MySQL –∑–∞–∫—Ä—ã—Ç–æ")
    
    def get_discount_rules(self, iblock_id: int) -> List[PriceRule]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–∫–∏–¥–æ–∫ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞"""
        cursor = self.connection.cursor(dictionary=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Å–∫–∏–¥–æ–∫ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
        query = """
        SELECT 
            e.ID,
            e.IBLOCK_SECTION_ID as SECTION_ID,
            p1.VALUE as MIN_PRICE,
            p2.VALUE as MAX_PRICE,
            p3.VALUE as DISCOUNT_PERCENT,
            e.SORT as PRIORITY
        FROM b_iblock_element e
        LEFT JOIN b_iblock_element_property p1 ON (
            e.ID = p1.IBLOCK_ELEMENT_ID 
            AND p1.IBLOCK_PROPERTY_ID = (
                SELECT ID FROM b_iblock_property 
                WHERE IBLOCK_ID = %s AND CODE = 'MIN_PRICE'
            )
        )
        LEFT JOIN b_iblock_element_property p2 ON (
            e.ID = p2.IBLOCK_ELEMENT_ID 
            AND p2.IBLOCK_PROPERTY_ID = (
                SELECT ID FROM b_iblock_property 
                WHERE IBLOCK_ID = %s AND CODE = 'MAX_PRICE'
            )
        )
        LEFT JOIN b_iblock_element_property p3 ON (
            e.ID = p3.IBLOCK_ELEMENT_ID 
            AND p3.IBLOCK_PROPERTY_ID = (
                SELECT ID FROM b_iblock_property 
                WHERE IBLOCK_ID = %s AND CODE = 'DISCOUNT_PERCENT'
            )
        )
        WHERE e.IBLOCK_ID = %s AND e.ACTIVE = 'Y'
        ORDER BY e.SORT, e.ID
        """
        
        cursor.execute(query, (iblock_id, iblock_id, iblock_id, iblock_id))
        
        rules = []
        for row in cursor.fetchall():
            try:
                rules.append(PriceRule(
                    section_id=row['SECTION_ID'] or 0,
                    min_price=float(row['MIN_PRICE'] or 0),
                    max_price=float(row['MAX_PRICE'] or 999999),
                    discount_percent=float(row['DISCOUNT_PERCENT'] or 0),
                    priority=row['PRIORITY'] or 500
                ))
            except (ValueError, TypeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–∫–∏–¥–∫–∏ {row['ID']}: {e}")
        
        cursor.close()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª —Å–∫–∏–¥–æ–∫: {len(rules)}")
        return rules
    
    def get_products_with_prices(self, supplier_prefix: str, batch_size: int = 1000) -> List[ProductPrice]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏"""
        cursor = self.connection.cursor(dictionary=True)
        
        query = """
        SELECT 
            e.ID as PRODUCT_ID,
            e.NAME,
            e.IBLOCK_SECTION_ID as SECTION_ID,
            prop.VALUE as ARTICLE,
            price.PRICE
        FROM b_iblock_element e
        LEFT JOIN b_iblock_element_property prop ON (
            e.ID = prop.IBLOCK_ELEMENT_ID 
            AND prop.IBLOCK_PROPERTY_ID = (
                SELECT ID FROM b_iblock_property 
                WHERE IBLOCK_ID = e.IBLOCK_ID AND CODE = 'CML2_ARTICLE'
            )
        )
        LEFT JOIN b_catalog_price price ON (
            e.ID = price.PRODUCT_ID 
            AND price.CATALOG_GROUP_ID = 1
        )
        WHERE e.ACTIVE = 'Y' 
        AND prop.VALUE LIKE %s
        AND price.PRICE IS NOT NULL
        ORDER BY e.ID
        LIMIT %s
        """
        
        cursor.execute(query, (f"{supplier_prefix}%", batch_size))
        
        products = []
        for row in cursor.fetchall():
            products.append(ProductPrice(
                product_id=row['PRODUCT_ID'],
                price=float(row['PRICE']),
                section_id=row['SECTION_ID'] or 0,
                article=row['ARTICLE'] or ''
            ))
        
        cursor.close()
        return products
    
    def find_applicable_discount(self, product: ProductPrice, rules: List[PriceRule]) -> Optional[PriceRule]:
        """–ü–æ–∏—Å–∫ –ø—Ä–∏–º–µ–Ω–∏–º–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ —Å–∫–∏–¥–∫–∏"""
        applicable_rules = []
        
        for rule in rules:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ü–∏—é (0 = –¥–ª—è –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π)
            if rule.section_id != 0 and rule.section_id != product.section_id:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
            if product.price < rule.min_price or product.price > rule.max_price:
                continue
            
            applicable_rules.append(rule)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if applicable_rules:
            return min(applicable_rules, key=lambda r: r.priority)
        
        return None
    
    def update_product_discount(self, product_id: int, discount_price: float) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π"""
        cursor = self.connection.cursor()
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –≥—Ä—É–ø–ø–µ —Å–∫–∏–¥–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥—Ä—É–ø–ø–∞ 2)
            cursor.execute("""
            INSERT INTO b_catalog_price 
            (PRODUCT_ID, CATALOG_GROUP_ID, PRICE, CURRENCY, TIMESTAMP_X)
            VALUES (%s, 2, %s, 'RUB', NOW())
            ON DUPLICATE KEY UPDATE 
            PRICE = VALUES(PRICE), 
            TIMESTAMP_X = NOW()
            """, (product_id, discount_price))
            
            return True
            
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
            return False
        finally:
            cursor.close()
    
    def process_discounts(self, supplier_prefix: str, discount_iblock_id: int, batch_size: int = 1000):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å–∫–∏–¥–æ–∫"""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç —Å–∫–∏–¥–æ–∫...")
        start_time = datetime.now()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Å–∫–∏–¥–æ–∫
        rules = self.get_discount_rules(discount_iblock_id)
        if not rules:
            logger.warning("–ü—Ä–∞–≤–∏–ª–∞ —Å–∫–∏–¥–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–∞–∫–µ—Ç–∞–º–∏
        offset = 0
        total_processed = 0
        
        while True:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤
            cursor = self.connection.cursor(dictionary=True)
            cursor.execute("""
            SELECT 
                e.ID as PRODUCT_ID,
                e.IBLOCK_SECTION_ID as SECTION_ID,
                prop.VALUE as ARTICLE,
                price.PRICE
            FROM b_iblock_element e
            LEFT JOIN b_iblock_element_property prop ON (
                e.ID = prop.IBLOCK_ELEMENT_ID 
                AND prop.IBLOCK_PROPERTY_ID = (
                    SELECT ID FROM b_iblock_property 
                    WHERE IBLOCK_ID = e.IBLOCK_ID AND CODE = 'CML2_ARTICLE'
                )
            )
            LEFT JOIN b_catalog_price price ON (
                e.ID = price.PRODUCT_ID 
                AND price.CATALOG_GROUP_ID = 1
            )
            WHERE e.ACTIVE = 'Y' 
            AND prop.VALUE LIKE %s
            AND price.PRICE IS NOT NULL
            ORDER BY e.ID
            LIMIT %s OFFSET %s
            """, (f"{supplier_prefix}%", batch_size, offset))
            
            products = cursor.fetchall()
            cursor.close()
            
            if not products:
                break
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
            for row in products:
                product = ProductPrice(
                    product_id=row['PRODUCT_ID'],
                    price=float(row['PRICE']),
                    section_id=row['SECTION_ID'] or 0,
                    article=row['ARTICLE'] or ''
                )
                
                # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–º–µ–Ω–∏–º–æ–µ –ø—Ä–∞–≤–∏–ª–æ —Å–∫–∏–¥–∫–∏
                discount_rule = self.find_applicable_discount(product, rules)
                
                if discount_rule:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π
                    discount_price = product.price * (1 - discount_rule.discount_percent / 100)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π
                    if self.update_product_discount(product.product_id, discount_price):
                        self.updated_count += 1
                        logger.debug(f"üí∞ {product.article}: {product.price} ‚Üí {discount_price:.2f} —Ä—É–±. (-{discount_rule.discount_percent}%)")
                
                self.processed_count += 1
            
            total_processed += len(products)
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_processed}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–∫–∏–¥–æ–∫: {self.updated_count}")
            
            offset += batch_size
        
        duration = (datetime.now() - start_time).total_seconds()
        logger.info(f"‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç —Å–∫–∏–¥–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.1f}—Å")
        logger.info(f"üìà –ò—Ç–æ–≥–æ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {self.processed_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {self.updated_count}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    from dotenv import load_dotenv
    load_dotenv()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    mysql_config = {
        'host': os.getenv('BITRIX_MYSQL_HOST', '127.0.0.1'),
        'port': int(os.getenv('BITRIX_MYSQL_PORT', 3306)),
        'database': os.getenv('BITRIX_MYSQL_DATABASE', 'sitemanager'),
        'user': os.getenv('BITRIX_MYSQL_USERNAME', 'bitrix_sync'),
        'password': os.getenv('BITRIX_MYSQL_PASSWORD', '')
    }
    
    supplier_prefix = os.getenv('SUPPLIER_PREFIX', '—Ç–æ–≤-')
    discount_iblock_id = int(os.getenv('DISCOUNT_IBLOCK_ID', 39))  # ID –±–ª–æ–∫–∞ –ø—Ä–∞–≤–∏–ª —Å–∫–∏–¥–æ–∫
    batch_size = int(os.getenv('SATURN_BATCH_SIZE', 1000))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    optimizer = UnderpriceOptimizer(mysql_config)
    
    try:
        optimizer.connect()
        optimizer.process_discounts(supplier_prefix, discount_iblock_id, batch_size)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    finally:
        optimizer.disconnect()
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
