#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ Saturn
"""

import requests
from bs4 import BeautifulSoup
import time

def test_search_methods(sku: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞"""
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞: {sku}")
    
    # –†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL –ø–æ–∏—Å–∫–∞
    search_urls = [
        f"https://nnv.saturn.net/catalog/?sp%5Bname%5D=1&sp%5Bartikul%5D=1&search=&s=—Ç–æ–≤-{sku}",
        f"https://nnv.saturn.net/catalog/?sp%5Bname%5D=1&sp%5Bartikul%5D=1&search=&s={sku}",
        f"https://nnv.saturn.net/catalog/?search=—Ç–æ–≤-{sku}",
        f"https://nnv.saturn.net/catalog/?search={sku}",
        f"https://nnv.saturn.net/search/?q=—Ç–æ–≤-{sku}",
        f"https://nnv.saturn.net/search/?q={sku}"
    ]
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    
    for i, url in enumerate(search_urls, 1):
        print(f"\nüìç –ú–µ—Ç–æ–¥ {i}: {url}")
        
        try:
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–æ–≤—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
            product_items = soup.find_all('div', class_='h_s_list_categor_item_wrap')
            print(f"  üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(product_items)}")
            
            # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª
            found_target = False
            for item in product_items:
                article_elem = item.find('p', class_='h_s_list_categor_item_articul')
                if article_elem:
                    article_text = article_elem.get_text(strip=True)
                    if f"—Ç–æ–≤-{sku}" in article_text:
                        found_target = True
                        print(f"  ‚úÖ –ù–ê–ô–î–ï–ù —Ü–µ–ª–µ–≤–æ–π —Ç–æ–≤–∞—Ä: {article_text}")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
                        price_elem = item.find('span', class_='shopping_cart_goods_list_item_sum_item')
                        if price_elem:
                            price_text = price_elem.get_text(strip=True)
                            print(f"  üí∞ –¶–µ–Ω–∞: {price_text}")
                        else:
                            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ü–µ–Ω—ã
                            import re
                            item_text = item.get_text()
                            price_match = re.search(r'(\d+[,.]?\d*)\s*‚ÇΩ', item_text)
                            if price_match:
                                print(f"  üí∞ –¶–µ–Ω–∞ (regex): {price_match.group(0)}")
                        break
            
            if not found_target and product_items:
                print(f"  ‚ùå –¶–µ–ª–µ–≤–æ–π —Ç–æ–≤–∞—Ä –ù–ï –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ {len(product_items)} —Ç–æ–≤–∞—Ä–æ–≤")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                for j, item in enumerate(product_items[:3]):
                    article_elem = item.find('p', class_='h_s_list_categor_item_articul')
                    if article_elem:
                        article_text = article_elem.get_text(strip=True)
                        print(f"    {j+1}. {article_text}")
            elif not product_items:
                print(f"  ‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                page_text = soup.get_text().lower()
                if any(phrase in page_text for phrase in ['–Ω–µ –Ω–∞–π–¥–µ–Ω–æ', '–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', '–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤']):
                    print(f"  üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                else:
                    print(f"  üìÑ –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {len(response.content)} –±–∞–π—Ç")
            
            if found_target:
                print(f"  üéâ –£–°–ü–ï–•! –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥–æ–º {i}")
                return True
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    return False

def test_multiple_skus():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ SKU –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
    
    # SKU –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑ –ª–æ–≥–æ–≤
    failed_skus = ["014143", "137742", "007476", "058173", "007554"]
    # SKU –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑ –ª–æ–≥–æ–≤
    success_skus = ["089749", "040688"]
    
    print("="*60)
    print("üîç –¢–ï–°–¢–ò–†–£–ï–ú –ù–ï –ù–ê–ô–î–ï–ù–ù–´–ï SKU:")
    print("="*60)
    
    for sku in failed_skus[:2]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
        result = test_search_methods(sku)
        if result:
            print(f"‚úÖ {sku} - –Ω–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º")
        else:
            print(f"‚ùå {sku} - –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º")
        print("-" * 40)
    
    print("\n" + "="*60)
    print("‚úÖ –¢–ï–°–¢–ò–†–£–ï–ú –ù–ê–ô–î–ï–ù–ù–´–ï SKU:")
    print("="*60)
    
    for sku in success_skus[:1]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π
        result = test_search_methods(sku)
        if result:
            print(f"‚úÖ {sku} - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
        else:
            print(f"‚ùå {sku} - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("-" * 40)

if __name__ == "__main__":
    test_multiple_skus()
