#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Bitrix –¥–ª—è Saturn Parser
"""

import os
import sys
from bitrix_integration import BitrixClient, BitrixConfig
import logging
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def debug_products():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É—Ç–∏
    env_path = os.path.join(os.path.dirname(__file__), '.env')
    load_dotenv(env_path)
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üîß –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑: {env_path}")
    print(f"üîß .env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(env_path)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    mysql_password = os.getenv('BITRIX_MYSQL_PASSWORD', '')
    print(f"üîß MySQL –ø–∞—Ä–æ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: {'–î–∞' if mysql_password else '–ù–ï–¢'}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    config = BitrixConfig(
        mysql_host=os.getenv('BITRIX_MYSQL_HOST', 'localhost'),
        mysql_port=int(os.getenv('BITRIX_MYSQL_PORT', 3306)),
        mysql_database=os.getenv('BITRIX_MYSQL_DATABASE', 'sitemanager'),
        mysql_username=os.getenv('BITRIX_MYSQL_USERNAME', 'bitrix_sync'),
        mysql_password=mysql_password,
        iblock_id=int(os.getenv('BITRIX_IBLOCK_ID', 11)),
        supplier_prefix=os.getenv('SUPPLIER_PREFIX', '—Ç–æ–≤-')
    )
    
    print(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ {config.iblock_id}")
    print(f"üìã –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: '{config.supplier_prefix}'")
    print("-" * 60)
    
    with BitrixClient(config) as bitrix:
        cursor = bitrix.connection.cursor(dictionary=True)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫
        print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞:")
        cursor.execute("""
        SELECT ID, NAME, CODE, ACTIVE 
        FROM b_iblock 
        WHERE ID = %s
        """, (config.iblock_id,))
        
        iblock = cursor.fetchone()
        if iblock:
            print(f"   ‚úÖ ID: {iblock['ID']}, –ù–∞–∑–≤–∞–Ω–∏–µ: {iblock['NAME']}, –ê–∫—Ç–∏–≤–µ–Ω: {iblock['ACTIVE']}")
        else:
            print(f"   ‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ {config.iblock_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        print("\n2Ô∏è‚É£ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤:")
        cursor.execute("""
        SELECT ID, CODE, NAME, PROPERTY_TYPE 
        FROM b_iblock_property 
        WHERE IBLOCK_ID = %s 
        AND CODE IN ('CML2_ARTICLE', 'CML2_TRAIT_ARTIKUL', 'ARTICLE', 'SKU', 'ARTIKUL')
        ORDER BY CODE
        """, (config.iblock_id,))
        
        article_fields = cursor.fetchall()
        if article_fields:
            for field in article_fields:
                print(f"   üìù {field['CODE']}: {field['NAME']} (ID: {field['ID']})")
        else:
            print("   ‚ùå –ü–æ–ª—è –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        
        # 3. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        print("\n3Ô∏è‚É£ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:")
        cursor.execute("""
        SELECT 
            COUNT(*) as total,
            COUNT(CASE WHEN ACTIVE = 'Y' THEN 1 END) as active
        FROM b_iblock_element 
        WHERE IBLOCK_ID = %s
        """, (config.iblock_id,))
        
        stats = cursor.fetchone()
        print(f"   üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats['total']}, –∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
        print("\n4Ô∏è‚É£ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º:")
        
        prefixes_to_check = ['—Ç–æ–≤-', 'saturn-', 'm-', '—Ç–æ–≤–∞—Ä-', '—Ç–æ–≤_']
        
        for field in article_fields:
            print(f"\n   üîç –ü–æ–ª–µ {field['CODE']}:")
            
            for prefix in prefixes_to_check:
                cursor.execute("""
                SELECT COUNT(*) as count
                FROM b_iblock_element e
                LEFT JOIN b_iblock_element_property p ON (
                    e.ID = p.IBLOCK_ELEMENT_ID 
                    AND p.IBLOCK_PROPERTY_ID = %s
                )
                WHERE e.IBLOCK_ID = %s 
                AND e.ACTIVE = 'Y'
                AND p.VALUE LIKE %s
                """, (field['ID'], config.iblock_id, f"{prefix}%"))
                
                result = cursor.fetchone()
                count = result['count']
                if count > 0:
                    print(f"      ‚úÖ '{prefix}*': {count} —Ç–æ–≤–∞—Ä–æ–≤")
                else:
                    print(f"      ‚ö™ '{prefix}*': 0 —Ç–æ–≤–∞—Ä–æ–≤")
        
        # 5. –ü—Ä–∏–º–µ—Ä—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        print("\n5Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤ (–ø–µ—Ä–≤—ã–µ 10):")
        
        if article_fields:
            main_field = article_fields[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
            cursor.execute("""
            SELECT p.VALUE as article, e.NAME
            FROM b_iblock_element e
            LEFT JOIN b_iblock_element_property p ON (
                e.ID = p.IBLOCK_ELEMENT_ID 
                AND p.IBLOCK_PROPERTY_ID = %s
            )
            WHERE e.IBLOCK_ID = %s 
            AND e.ACTIVE = 'Y'
            AND p.VALUE IS NOT NULL
            AND p.VALUE != ''
            ORDER BY e.ID
            LIMIT 10
            """, (main_field['ID'], config.iblock_id))
            
            examples = cursor.fetchall()
            if examples:
                for example in examples:
                    print(f"      üì¶ '{example['article']}' - {example['NAME'][:50]}...")
            else:
                print("      ‚ùå –ü—Ä–∏–º–µ—Ä—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # 6. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö "saturn" –∏–ª–∏ "—Å–∞—Ç—É—Ä–Ω"
        print("\n6Ô∏è‚É£ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö 'saturn' –∏–ª–∏ '—Å–∞—Ç—É—Ä–Ω':")
        
        if article_fields:
            main_field = article_fields[0]
            
            search_terms = ['saturn', '—Å–∞—Ç—É—Ä–Ω', 'Saturn', 'SATURN']
            
            for term in search_terms:
                cursor.execute("""
                SELECT COUNT(*) as count
                FROM b_iblock_element e
                LEFT JOIN b_iblock_element_property p ON (
                    e.ID = p.IBLOCK_ELEMENT_ID 
                    AND p.IBLOCK_PROPERTY_ID = %s
                )
                WHERE e.IBLOCK_ID = %s 
                AND e.ACTIVE = 'Y'
                AND (p.VALUE LIKE %s OR e.NAME LIKE %s)
                """, (main_field['ID'], config.iblock_id, f"%{term}%", f"%{term}%"))
                
                result = cursor.fetchone()
                count = result['count']
                if count > 0:
                    print(f"      ‚úÖ –°–æ–¥–µ—Ä–∂–∞—Ç '{term}': {count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        cursor.close()
    
    print("\n" + "=" * 60)
    print("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å–∞ SUPPLIER_PREFIX –≤ .env")
    print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç–æ–≤–∞—Ä—ã Saturn –µ—Å—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—è –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤")


if __name__ == '__main__':
    debug_products()
