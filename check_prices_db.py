#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Bitrix
–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã b_catalog_price –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
"""

import os
import sys
from dotenv import load_dotenv
import mysql.connector
from mysql.connector import Error

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def check_price_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ü–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL
    connection = mysql.connector.connect(
        host=os.getenv('BITRIX_MYSQL_HOST', '127.0.0.1'),
        port=int(os.getenv('BITRIX_MYSQL_PORT', 3306)),
        database=os.getenv('BITRIX_MYSQL_DATABASE', 'sitemanager'),
        user=os.getenv('BITRIX_MYSQL_USERNAME', 'bitrix_sync'),
        password=os.getenv('BITRIX_MYSQL_PASSWORD', ''),
        charset='utf8mb4',
        use_pure=True
    )
    
    cursor = connection.cursor(dictionary=True)
    
    print("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ü–µ–Ω –≤ Bitrix...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã —Ü–µ–Ω
    print("\nüìä –ì—Ä—É–ø–ø—ã —Ü–µ–Ω (CATALOG_GROUP):")
    cursor.execute("""
    SELECT ID, NAME, BASE, SORT 
    FROM b_catalog_group 
    ORDER BY SORT, ID
    """)
    
    groups = cursor.fetchall()
    for group in groups:
        print(f"  ID {group['ID']}: {group['NAME']} (BASE: {group['BASE']})")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    supplier_prefix = os.getenv('SUPPLIER_PREFIX', '—Ç–æ–≤-')
    print(f"\nüí∞ –¶–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '{supplier_prefix}':")
    
    cursor.execute("""
    SELECT 
        e.ID as PRODUCT_ID,
        prop.VALUE as ARTICLE,
        e.NAME,
        price.CATALOG_GROUP_ID,
        cg.NAME as GROUP_NAME,
        price.PRICE,
        price.TIMESTAMP_X
    FROM b_iblock_element e
    LEFT JOIN b_iblock_element_property prop ON (
        e.ID = prop.IBLOCK_ELEMENT_ID 
        AND prop.IBLOCK_PROPERTY_ID = (
            SELECT ID FROM b_iblock_property 
            WHERE IBLOCK_ID = e.IBLOCK_ID AND CODE = 'CML2_ARTICLE'
        )
    )
    LEFT JOIN b_catalog_price price ON e.ID = price.PRODUCT_ID
    LEFT JOIN b_catalog_group cg ON price.CATALOG_GROUP_ID = cg.ID
    WHERE e.ACTIVE = 'Y' 
    AND prop.VALUE LIKE %s
    AND price.PRICE IS NOT NULL
    ORDER BY e.ID, price.CATALOG_GROUP_ID
    LIMIT 20
    """, (f"{supplier_prefix}%",))
    
    prices = cursor.fetchall()
    current_product = None
    
    for price in prices:
        if current_product != price['PRODUCT_ID']:
            current_product = price['PRODUCT_ID']
            print(f"\nüì¶ {price['ARTICLE']} (ID: {price['PRODUCT_ID']}):")
        
        print(f"  –ì—Ä—É–ø–ø–∞ {price['CATALOG_GROUP_ID']} ({price['GROUP_NAME']}): {price['PRICE']} —Ä—É–±. ({price['TIMESTAMP_X']})")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
    print(f"\nüïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è Saturn —Ç–æ–≤–∞—Ä–æ–≤:")
    cursor.execute("""
    SELECT 
        e.ID as PRODUCT_ID,
        prop.VALUE as ARTICLE,
        price.CATALOG_GROUP_ID,
        cg.NAME as GROUP_NAME,
        price.PRICE,
        price.TIMESTAMP_X
    FROM b_iblock_element e
    LEFT JOIN b_iblock_element_property prop ON (
        e.ID = prop.IBLOCK_ELEMENT_ID 
        AND prop.IBLOCK_PROPERTY_ID = (
            SELECT ID FROM b_iblock_property 
            WHERE IBLOCK_ID = e.IBLOCK_ID AND CODE = 'CML2_ARTICLE'
        )
    )
    LEFT JOIN b_catalog_price price ON e.ID = price.PRODUCT_ID
    LEFT JOIN b_catalog_group cg ON price.CATALOG_GROUP_ID = cg.ID
    WHERE e.ACTIVE = 'Y' 
    AND prop.VALUE LIKE %s
    AND price.PRICE IS NOT NULL
    AND price.TIMESTAMP_X >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
    ORDER BY price.TIMESTAMP_X DESC
    LIMIT 10
    """, (f"{supplier_prefix}%",))
    
    recent_updates = cursor.fetchall()
    if recent_updates:
        for update in recent_updates:
            print(f"  {update['ARTICLE']} - –ì—Ä—É–ø–ø–∞ {update['CATALOG_GROUP_ID']}: {update['PRICE']} —Ä—É–±. ({update['TIMESTAMP_X']})")
    else:
        print("  –ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")
    
    # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º —Ü–µ–Ω
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω –ø–æ –≥—Ä—É–ø–ø–∞–º –¥–ª—è Saturn —Ç–æ–≤–∞—Ä–æ–≤:")
    cursor.execute("""
    SELECT 
        price.CATALOG_GROUP_ID,
        cg.NAME as GROUP_NAME,
        COUNT(*) as PRODUCTS_COUNT,
        AVG(price.PRICE) as AVG_PRICE,
        MIN(price.PRICE) as MIN_PRICE,
        MAX(price.PRICE) as MAX_PRICE
    FROM b_iblock_element e
    LEFT JOIN b_iblock_element_property prop ON (
        e.ID = prop.IBLOCK_ELEMENT_ID 
        AND prop.IBLOCK_PROPERTY_ID = (
            SELECT ID FROM b_iblock_property 
            WHERE IBLOCK_ID = e.IBLOCK_ID AND CODE = 'CML2_ARTICLE'
        )
    )
    LEFT JOIN b_catalog_price price ON e.ID = price.PRODUCT_ID
    LEFT JOIN b_catalog_group cg ON price.CATALOG_GROUP_ID = cg.ID
    WHERE e.ACTIVE = 'Y' 
    AND prop.VALUE LIKE %s
    AND price.PRICE IS NOT NULL
    GROUP BY price.CATALOG_GROUP_ID, cg.NAME
    ORDER BY price.CATALOG_GROUP_ID
    """, (f"{supplier_prefix}%",))
    
    stats = cursor.fetchall()
    for stat in stats:
        print(f"  –ì—Ä—É–ø–ø–∞ {stat['CATALOG_GROUP_ID']} ({stat['GROUP_NAME']}): {stat['PRODUCTS_COUNT']} —Ç–æ–≤–∞—Ä–æ–≤, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stat['AVG_PRICE']:.2f} —Ä—É–±.")
    
    cursor.close()
    connection.close()

if __name__ == "__main__":
    try:
        check_price_structure()
    except Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)
