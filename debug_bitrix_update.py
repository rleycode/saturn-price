#!/usr/bin/env python3
"""
Debug Bitrix Update - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –≤ Bitrix –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
"""

import os
import logging
from dotenv import load_dotenv
from bitrix_integration import BitrixClient, BitrixConfig

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def debug_product_114289():
    """–û—Ç–ª–∞–¥–∫–∞ —Ç–æ–≤–∞—Ä–∞ 114289"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = BitrixConfig(
        mysql_host=os.getenv('BITRIX_MYSQL_HOST', '127.0.0.1'),
        mysql_port=int(os.getenv('BITRIX_MYSQL_PORT', 3306)),
        mysql_database=os.getenv('BITRIX_MYSQL_DATABASE', 'sitemanager'),
        mysql_username=os.getenv('BITRIX_MYSQL_USERNAME', 'bitrix_sync'),
        mysql_password=os.getenv('BITRIX_MYSQL_PASSWORD', ''),
        iblock_id=int(os.getenv('BITRIX_IBLOCK_ID', 11)),
        supplier_prefix=os.getenv('SUPPLIER_PREFIX', '—Ç–æ–≤-')
    )
    
    target_article = "—Ç–æ–≤-114289"
    test_price = 92.0
    
    logger.info(f"=== –û—Ç–ª–∞–¥–∫–∞ —Ç–æ–≤–∞—Ä–∞ {target_article} ===")
    
    with BitrixClient(config) as bitrix:
        # 1. –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ
        logger.info("1. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        products = bitrix.get_products_by_prefix()
        
        target_product = None
        for product in products:
            if product.article == target_article:
                target_product = product
                break
        
        if not target_product:
            logger.error(f"–¢–æ–≤–∞—Ä {target_article} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!")
            return False
        
        logger.info(f"–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: ID={target_product.id}, Name='{target_product.name}'")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        logger.info("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã...")
        cursor = bitrix.connection.cursor(dictionary=True)
        
        cursor.execute("""
        SELECT cp.ID, cp.PRICE, cp.CATALOG_GROUP_ID, cp.TIMESTAMP_X, cg.NAME as GROUP_NAME
        FROM b_catalog_price cp
        LEFT JOIN b_catalog_group cg ON cp.CATALOG_GROUP_ID = cg.ID
        WHERE cp.PRODUCT_ID = %s
        ORDER BY cp.CATALOG_GROUP_ID
        """, (target_product.id,))
        
        current_prices = cursor.fetchall()
        
        if current_prices:
            logger.info("–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:")
            for price in current_prices:
                logger.info(f"  –ì—Ä—É–ø–ø–∞ {price['CATALOG_GROUP_ID']} ({price['GROUP_NAME']}): {price['PRICE']} —Ä—É–±. (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {price['TIMESTAMP_X']})")
        else:
            logger.info("–¶–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # 3. –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã
        logger.info(f"3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {test_price} —Ä—É–±...")
        
        success = bitrix.update_product_price(target_product.id, test_price, 1)
        
        if success:
            logger.info("‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã")
            return False
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        logger.info("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        
        cursor.execute("""
        SELECT cp.ID, cp.PRICE, cp.CATALOG_GROUP_ID, cp.TIMESTAMP_X, cg.NAME as GROUP_NAME
        FROM b_catalog_price cp
        LEFT JOIN b_catalog_group cg ON cp.CATALOG_GROUP_ID = cg.ID
        WHERE cp.PRODUCT_ID = %s
        ORDER BY cp.CATALOG_GROUP_ID
        """, (target_product.id,))
        
        updated_prices = cursor.fetchall()
        
        if updated_prices:
            logger.info("–¶–µ–Ω—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
            for price in updated_prices:
                logger.info(f"  –ì—Ä—É–ø–ø–∞ {price['CATALOG_GROUP_ID']} ({price['GROUP_NAME']}): {price['PRICE']} —Ä—É–±. (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {price['TIMESTAMP_X']})")
                
                if price['CATALOG_GROUP_ID'] == 1 and float(price['PRICE']) == test_price:
                    logger.info("‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
                    return True
        else:
            logger.error("‚ùå –¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return False
        
        cursor.close()
        
        logger.error("‚ùå –¶–µ–Ω–∞ –Ω–µ –±—ã–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        return False

def check_catalog_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞"""
    
    config = BitrixConfig(
        mysql_host=os.getenv('BITRIX_MYSQL_HOST', '127.0.0.1'),
        mysql_port=int(os.getenv('BITRIX_MYSQL_PORT', 3306)),
        mysql_database=os.getenv('BITRIX_MYSQL_DATABASE', 'sitemanager'),
        mysql_username=os.getenv('BITRIX_MYSQL_USERNAME', 'bitrix_sync'),
        mysql_password=os.getenv('BITRIX_MYSQL_PASSWORD', ''),
        iblock_id=int(os.getenv('BITRIX_IBLOCK_ID', 11)),
        supplier_prefix=os.getenv('SUPPLIER_PREFIX', '—Ç–æ–≤-')
    )
    
    logger.info("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞ ===")
    
    with BitrixClient(config) as bitrix:
        cursor = bitrix.connection.cursor(dictionary=True)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø —Ü–µ–Ω
        logger.info("–ì—Ä—É–ø–ø—ã —Ü–µ–Ω:")
        cursor.execute("SELECT ID, NAME, BASE FROM b_catalog_group ORDER BY ID")
        price_groups = cursor.fetchall()
        
        for group in price_groups:
            base_flag = "BASE" if group['BASE'] == 'Y' else ""
            logger.info(f"  ID={group['ID']}: {group['NAME']} {base_flag}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
        logger.info(f"\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ {config.iblock_id}:")
        cursor.execute("SELECT ID, NAME, CODE FROM b_iblock WHERE ID = %s", (config.iblock_id,))
        iblock = cursor.fetchone()
        
        if iblock:
            logger.info(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {iblock['NAME']}")
            logger.info(f"  –ö–æ–¥: {iblock['CODE']}")
        else:
            logger.error(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ {config.iblock_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        cursor.close()

if __name__ == '__main__':
    logger.info("üîç –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏ Bitrix –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    check_catalog_structure()
    
    print("\n" + "="*50 + "\n")
    
    # –û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    success = debug_product_114289()
    
    if success:
        logger.info("üéâ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("üí• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ü–µ–Ω")
