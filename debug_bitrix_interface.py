#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Bitrix
–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –≥—Ä—É–ø–ø —Ü–µ–Ω
"""

import os
import sys
from dotenv import load_dotenv
import mysql.connector
from mysql.connector import Error

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def debug_bitrix_catalog():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞ Bitrix"""
    
    connection = mysql.connector.connect(
        host=os.getenv('BITRIX_MYSQL_HOST', '127.0.0.1'),
        port=int(os.getenv('BITRIX_MYSQL_PORT', 3306)),
        database=os.getenv('BITRIX_MYSQL_DATABASE', 'sitemanager'),
        user=os.getenv('BITRIX_MYSQL_USERNAME', 'bitrix_sync'),
        password=os.getenv('BITRIX_MYSQL_PASSWORD', ''),
        charset='utf8mb4',
        use_pure=True
    )
    
    cursor = connection.cursor(dictionary=True)
    
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞ Bitrix...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
    iblock_id = int(os.getenv('BITRIX_IBLOCK_ID', 11))
    print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞ (ID: {iblock_id}):")
    
    cursor.execute("""
    SELECT ID, NAME, ACTIVE, LIST_PAGE_URL, DETAIL_PAGE_URL 
    FROM b_iblock 
    WHERE ID = %s
    """, (iblock_id,))
    
    iblock = cursor.fetchone()
    if iblock:
        print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {iblock['NAME']}")
        print(f"  –ê–∫—Ç–∏–≤–µ–Ω: {iblock['ACTIVE']}")
        print(f"  URL —Å–ø–∏—Å–∫–∞: {iblock['LIST_PAGE_URL']}")
        print(f"  URL –¥–µ—Ç–∞–ª–∏: {iblock['DETAIL_PAGE_URL']}")
    else:
        print("  ‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–º—É –±–ª–æ–∫—É
    print(f"\nüõí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:")
    cursor.execute("""
    SELECT IBLOCK_ID, YANDEX_EXPORT, SUBSCRIPTION, VAT_ID, 
           PRODUCT_IBLOCK_ID, SKU_PROPERTY_ID
    FROM b_catalog_iblock 
    WHERE IBLOCK_ID = %s
    """, (iblock_id,))
    
    catalog = cursor.fetchone()
    if catalog:
        print(f"  –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–∏–≤—è–∑–∞–Ω: ‚úÖ")
        print(f"  –≠–∫—Å–ø–æ—Ä—Ç –≤ –Ø–Ω–¥–µ–∫—Å: {catalog['YANDEX_EXPORT']}")
        print(f"  ID —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –±–ª–æ–∫–∞: {catalog['PRODUCT_IBLOCK_ID']}")
        print(f"  ID —Å–≤–æ–π—Å—Ç–≤–∞ SKU: {catalog['SKU_PROPERTY_ID']}")
    else:
        print("  ‚ùå –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–º—É –±–ª–æ–∫—É!")
        return
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã —Ü–µ–Ω –∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print(f"\nüí∞ –ì—Ä—É–ø–ø—ã —Ü–µ–Ω:")
    cursor.execute("""
    SELECT ID, NAME, BASE, SORT 
    FROM b_catalog_group 
    ORDER BY SORT, ID
    """)
    
    groups = cursor.fetchall()
    for group in groups:
        base_mark = "üî• –ë–ê–ó–û–í–ê–Ø" if group['BASE'] == 'Y' else ""
        print(f"  ID {group['ID']}: {group['NAME']} {base_mark}")
        print(f"    –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {group['SORT']}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    supplier_prefix = os.getenv('SUPPLIER_PREFIX', '—Ç–æ–≤-')
    print(f"\nüß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä Saturn:")
    
    cursor.execute("""
    SELECT 
        e.ID,
        e.NAME,
        e.ACTIVE,
        e.ACTIVE_FROM,
        e.ACTIVE_TO,
        prop.VALUE as ARTICLE,
        cat.QUANTITY,
        cat.QUANTITY_RESERVED,
        cat.PURCHASING_PRICE,
        cat.WEIGHT,
        cat.WIDTH,
        cat.LENGTH,
        cat.HEIGHT
    FROM b_iblock_element e
    LEFT JOIN b_iblock_element_property prop ON (
        e.ID = prop.IBLOCK_ELEMENT_ID 
        AND prop.IBLOCK_PROPERTY_ID = (
            SELECT ID FROM b_iblock_property 
            WHERE IBLOCK_ID = e.IBLOCK_ID AND CODE = 'CML2_ARTICLE'
        )
    )
    LEFT JOIN b_catalog_product cat ON e.ID = cat.ID
    WHERE e.ACTIVE = 'Y' 
    AND e.IBLOCK_ID = %s
    AND prop.VALUE LIKE %s
    ORDER BY e.ID
    LIMIT 1
    """, (iblock_id, f"{supplier_prefix}%"))
    
    test_product = cursor.fetchone()
    if test_product:
        print(f"  üì¶ {test_product['ARTICLE']} (ID: {test_product['ID']})")
        print(f"    –ù–∞–∑–≤–∞–Ω–∏–µ: {test_product['NAME']}")
        print(f"    –ê–∫—Ç–∏–≤–µ–Ω: {test_product['ACTIVE']}")
        print(f"    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {test_product['QUANTITY']}")
        print(f"    –ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {test_product['PURCHASING_PRICE']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ü–µ–Ω—ã —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        cursor.execute("""
        SELECT 
            price.CATALOG_GROUP_ID,
            cg.NAME as GROUP_NAME,
            price.PRICE,
            price.CURRENCY,
            price.TIMESTAMP_X,
            price.QUANTITY_FROM,
            price.QUANTITY_TO
        FROM b_catalog_price price
        LEFT JOIN b_catalog_group cg ON price.CATALOG_GROUP_ID = cg.ID
        WHERE price.PRODUCT_ID = %s
        ORDER BY price.CATALOG_GROUP_ID
        """, (test_product['ID'],))
        
        prices = cursor.fetchall()
        print(f"    –¶–µ–Ω—ã:")
        for price in prices:
            print(f"      –ì—Ä—É–ø–ø–∞ {price['CATALOG_GROUP_ID']} ({price['GROUP_NAME']}): {price['PRICE']} {price['CURRENCY']}")
            print(f"        –û–±–Ω–æ–≤–ª–µ–Ω–æ: {price['TIMESTAMP_X']}")
            if price['QUANTITY_FROM'] or price['QUANTITY_TO']:
                print(f"        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {price['QUANTITY_FROM']}-{price['QUANTITY_TO']}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
    print(f"\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞:")
    cursor.execute("""
    SELECT NAME, VALUE 
    FROM b_option 
    WHERE MODULE_ID = 'catalog' 
    AND NAME IN ('default_catalog_group', 'show_catalog_tab_with_offers', 'enable_reservation')
    ORDER BY NAME
    """)
    
    options = cursor.fetchall()
    for option in options:
        print(f"  {option['NAME']}: {option['VALUE']}")
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
    print(f"\nüîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É:")
    cursor.execute("""
    SELECT TASK_ID, OP_SREAD, OP_SEDIT 
    FROM b_iblock_right 
    WHERE IBLOCK_ID = %s 
    AND GROUP_CODE = 'G2'
    LIMIT 5
    """, (iblock_id,))
    
    rights = cursor.fetchall()
    if rights:
        for right in rights:
            print(f"  –ó–∞–¥–∞—á–∞ {right['TASK_ID']}: —á—Ç–µ–Ω–∏–µ={right['OP_SREAD']}, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ={right['OP_SEDIT']}")
    else:
        print("  –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–∞—Ç–∞–ª–æ–≥–∞
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:")
    cursor.execute("""
    SELECT COUNT(*) as TOTAL_PRODUCTS
    FROM b_iblock_element 
    WHERE IBLOCK_ID = %s AND ACTIVE = 'Y'
    """, (iblock_id,))
    
    total = cursor.fetchone()
    print(f"  –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {total['TOTAL_PRODUCTS']}")
    
    cursor.execute("""
    SELECT COUNT(*) as PRODUCTS_WITH_PRICES
    FROM b_iblock_element e
    INNER JOIN b_catalog_price p ON e.ID = p.PRODUCT_ID
    WHERE e.IBLOCK_ID = %s AND e.ACTIVE = 'Y'
    """, (iblock_id,))
    
    with_prices = cursor.fetchone()
    print(f"  –¢–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏: {with_prices['PRODUCTS_WITH_PRICES']}")
    
    cursor.close()
    connection.close()

if __name__ == "__main__":
    try:
        debug_bitrix_catalog()
    except Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)
