#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bitrix_integration import BitrixClient, BitrixConfig

def test_price_update():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
    config = BitrixConfig(
        mysql_host=os.getenv('BITRIX_MYSQL_HOST', '127.0.0.1'),
        mysql_port=int(os.getenv('BITRIX_MYSQL_PORT', 3306)),
        mysql_database=os.getenv('BITRIX_MYSQL_DATABASE', 'sitemanager'),
        mysql_username=os.getenv('BITRIX_MYSQL_USERNAME', 'bitrix_sync'),
        mysql_password=os.getenv('BITRIX_MYSQL_PASSWORD', ''),
        iblock_id=int(os.getenv('BITRIX_IBLOCK_ID', 11)),
        supplier_prefix=os.getenv('SUPPLIER_PREFIX', '—Ç–æ–≤-'),
        underprice_url=os.getenv('SATURN_UNDERPRICE_URL'),
        underprice_password=os.getenv('SATURN_UNDERPRICE_PASSWORD')
    )
    
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    with BitrixClient(config) as bitrix:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä Saturn –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        products = bitrix.get_products_by_prefix()
        if not products:
            print("‚ùå –¢–æ–≤–∞—Ä—ã Saturn –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        test_product = products[0]
        print(f"üì¶ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä: {test_product.article} (ID: {test_product.id})")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        cursor = bitrix.connection.cursor(dictionary=True)
        cursor.execute("""
        SELECT PRICE FROM b_catalog_price 
        WHERE PRODUCT_ID = %s AND CATALOG_GROUP_ID = 1
        """, (test_product.id,))
        
        current_price_row = cursor.fetchone()
        current_price = float(current_price_row['PRICE']) if current_price_row else 0.0
        
        print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} —Ä—É–±.")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ü–µ–Ω—É
        test_price = 999.99
        print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –Ω–∞: {test_price} —Ä—É–±.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        success = bitrix.update_product_price(test_product.id, test_price)
        
        if success:
            print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            cursor.execute("""
            SELECT PRICE FROM b_catalog_price 
            WHERE PRODUCT_ID = %s AND CATALOG_GROUP_ID = 1
            """, (test_product.id,))
            
            updated_price_row = cursor.fetchone()
            updated_price = float(updated_price_row['PRICE']) if updated_price_row else 0.0
            
            print(f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –≤ –ë–î: {updated_price} —Ä—É–±.")
            
            if abs(updated_price - test_price) < 0.01:
                print("‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ü–µ–Ω—É
                if current_price > 0:
                    bitrix.update_product_price(test_product.id, current_price)
                    print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞: {current_price} —Ä—É–±.")
                
                return True
            else:
                print(f"‚ùå –¶–µ–Ω–∞ –≤ –ë–î –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π: {updated_price} != {test_price}")
                return False
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã")
            return False
        
        cursor.close()

if __name__ == "__main__":
    success = test_price_update()
    sys.exit(0 if success else 1)
