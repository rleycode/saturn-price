#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ç–æ–≤–∞—Ä—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞ Saturn
"""

import requests
from bs4 import BeautifulSoup
import re

def direct_product_access():
    """–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É"""
    
    article = "114289"
    search_url = f"https://nnv.saturn.net/catalog/?sp%5Bname%5D=1&sp%5Bartikul%5D=1&search=&s={article}"
    
    print(f"üéØ –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ç–æ–≤–∞—Ä—É {article}")
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    
    try:
        response = requests.get(search_url, headers=headers, timeout=30)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ü–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ "1 —Ç–æ–≤–∞—Ä –∏–∑ 1 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" –æ–∑–Ω–∞—á–∞–µ—Ç —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        print(f"\nüîç –ü–æ–∏—Å–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö...")
        
        # 1. –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
        # –û–±—ã—á–Ω–æ —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–∞–º–∏ product, item, card –∏ —Ç.–¥.
        product_selectors = [
            '.catalog-item',
            '.product-item', 
            '.item',
            '.product',
            '[data-product]',
            '.card'
        ]
        
        found_product = None
        
        for selector in product_selectors:
            products = soup.select(selector)
            if products:
                print(f"  –ù–∞–π–¥–µ–Ω–æ {len(products)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É '{selector}'")
                found_product = products[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
                break
        
        if not found_product:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ - –ª—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å data-price
            price_elements = soup.find_all(attrs={'data-price': True})
            if price_elements:
                print(f"  –ù–∞–π–¥–µ–Ω–æ {len(price_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-price")
                # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞
                for price_elem in price_elements:
                    parent = price_elem.parent
                    while parent and parent.name != 'body':
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
                        product_link = parent.find('a', href=re.compile(r'/catalog/'))
                        if product_link:
                            found_product = parent
                            print(f"  –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ data-price —ç–ª–µ–º–µ–Ω—Ç")
                            break
                        parent = parent.parent
                    if found_product:
                        break
        
        if found_product:
            print(f"\nüì¶ –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            title_selectors = ['h1', 'h2', 'h3', 'a[href*="/catalog/"]', '.title', '.name']
            for selector in title_selectors:
                title_elem = found_product.select_one(selector)
                if title_elem:
                    title = title_elem.get_text(strip=True)
                    if len(title) > 10:  # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã
                        print(f"  üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                        break
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
            link_elem = found_product.find('a', href=re.compile(r'/catalog/'))
            if link_elem:
                product_url = link_elem.get('href')
                if not product_url.startswith('http'):
                    product_url = 'https://nnv.saturn.net' + product_url
                print(f"  üîó –°—Å—ã–ª–∫–∞: {product_url}")
            
            # –í—Å–µ —Ü–µ–Ω—ã –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Ç–æ–≤–∞—Ä–∞
            print(f"  üí∞ –¶–µ–Ω—ã:")
            
            # data-price –∞—Ç—Ä–∏–±—É—Ç—ã
            price_elements = found_product.find_all(attrs={'data-price': True})
            for price_elem in price_elements:
                price_value = price_elem.get('data-price')
                price_text = price_elem.get_text(strip=True)
                print(f"    data-price: {price_value} (—Ç–µ–∫—Å—Ç: '{price_text}')")
            
            # –ü–æ–∏—Å–∫ —Ü–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ
            product_text = found_product.get_text()
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ü–µ–Ω
            price_patterns = [
                r'(\d+)\s*‚ÇΩ',  # 99‚ÇΩ
                r'(\d+)\s*—Ä—É–±',  # 99 —Ä—É–±
                r'–° –∫–∞—Ä—Ç–æ–π\s*(\d+)\s*‚ÇΩ',  # –° –∫–∞—Ä—Ç–æ–π 92‚ÇΩ
                r'–ë–µ–∑ –∫–∞—Ä—Ç—ã\s*(\d+)\s*‚ÇΩ',  # –ë–µ–∑ –∫–∞—Ä—Ç—ã 99‚ÇΩ
                r'(\d+(?:[,.]?\d+)?)\s*(?:‚ÇΩ|—Ä—É–±)',  # –û–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
            ]
            
            all_found_prices = set()
            
            for pattern in price_patterns:
                matches = re.findall(pattern, product_text, re.IGNORECASE)
                for match in matches:
                    all_found_prices.add(match)
            
            for price in sorted(all_found_prices):
                print(f"    –¶–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ: {price}‚ÇΩ")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
            if 'product_url' in locals():
                print(f"\nüîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞...")
                try:
                    product_response = requests.get(product_url, headers=headers, timeout=30)
                    product_response.raise_for_status()
                    
                    product_soup = BeautifulSoup(product_response.content, 'html.parser')
                    
                    print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    
                    # –ü–æ–∏—Å–∫ —Ü–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞
                    print(f"  üí∞ –¶–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞:")
                    
                    # data-price –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞
                    product_prices = product_soup.find_all(attrs={'data-price': True})
                    for price_elem in product_prices:
                        price_value = price_elem.get('data-price')
                        print(f"    data-price: {price_value}")
                    
                    # –ü–æ–∏—Å–∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ü–µ–Ω
                    price_classes = ['.price', '.cost', '.amount', '[class*="price"]']
                    for price_class in price_classes:
                        price_elements = product_soup.select(price_class)
                        for elem in price_elements[:3]:  # –ü–µ—Ä–≤—ã–µ 3
                            text = elem.get_text(strip=True)
                            if any(c.isdigit() for c in text):
                                print(f"    {price_class}: {text}")
                    
                    # –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ "–° –∫–∞—Ä—Ç–æ–π" –∏ "–ë–µ–∑ –∫–∞—Ä—Ç—ã"
                    page_text = product_soup.get_text()
                    card_patterns = [
                        r'–° –∫–∞—Ä—Ç–æ–π[^\d]*(\d+)[^\d]*‚ÇΩ',
                        r'–ë–µ–∑ –∫–∞—Ä—Ç—ã[^\d]*(\d+)[^\d]*‚ÇΩ',
                        r'(\d+)\s*‚ÇΩ[^\d]*–° –∫–∞—Ä—Ç–æ–π',
                        r'(\d+)\s*‚ÇΩ[^\d]*–ë–µ–∑ –∫–∞—Ä—Ç—ã'
                    ]
                    
                    for pattern in card_patterns:
                        matches = re.findall(pattern, page_text, re.IGNORECASE)
                        if matches:
                            print(f"    –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É '{pattern}': {matches}")
                    
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞: {e}")
        
        else:
            print(f"‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            print(f"\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
            
            # –ò—â–µ–º –ª—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
            all_prices = soup.find_all(attrs={'data-price': True})
            print(f"  –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-price: {len(all_prices)}")
            
            if all_prices:
                print(f"  –ü–µ—Ä–≤—ã–µ 5 —Ü–µ–Ω:")
                for i, price_elem in enumerate(all_prices[:5]):
                    price_value = price_elem.get('data-price')
                    print(f"    {i+1}. {price_value}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    direct_product_access()
